from collections.abc import Mapping
from typing import Any, TypeVar

from attrs import define as _attrs_define
from attrs import field as _attrs_field
from typing_extensions import Self

T = TypeVar("T", bound="ConfirmTwoFactorRequestBody")


@_attrs_define
class ConfirmTwoFactorRequestBody:
    """Attributes:
    request_token (str): Token to identify the two factor request
    otp_token (str): OTP token generated by the app
    """

    request_token: str
    otp_token: str
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        """Convert instance to dictionary."""

        request_token = self.request_token

        otp_token = self.otp_token

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "requestToken": request_token,
                "otpToken": otp_token,
            }
        )

        return field_dict

    @classmethod
    def from_dict(cls, src_dict: Mapping[str, Any]) -> Self:
        """Create instance from dictionary."""

        d = dict(src_dict)
        request_token = d.pop("requestToken")

        otp_token = d.pop("otpToken")

        confirm_two_factor_request_body = cls(
            request_token=request_token, otp_token=otp_token
        )

        confirm_two_factor_request_body.additional_properties = d
        return confirm_two_factor_request_body

    @property
    def additional_keys(self) -> list[str]:
        """Get additional property keys."""

        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
